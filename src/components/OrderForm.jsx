// src/components/OrderForm.jsx
import React, { useState, useEffect } from 'react';
import {
  searchClient,
  getOrganizations,
  getWarehouses,
  getBills,
  getPriceTypes,
  getNomenclature,
  createSale
} from '../api/api';

const OrderForm = ({ token }) => {
  const [phone, setPhone] = useState('');
  const [client, setClient] = useState(null);
  const [organizations, setOrganizations] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [bills, setBills] = useState([]);
  const [priceTypes, setPriceTypes] = useState([]);
  const [nomenclature, setNomenclature] = useState([]);
  const [goods, setGoods] = useState([]);
  const [selectedOrg, setSelectedOrg] = useState('');
  const [selectedWarehouse, setSelectedWarehouse] = useState('');
  const [selectedBill, setSelectedBill] = useState('');
  const [paidRubles, setPaidRubles] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
  if (!token) return;
  const fetchData = async () => {
    try {
      const [orgRes, whRes, billRes, ptRes, nomRes] = await Promise.all([
        getOrganizations(token),
        getWarehouses(token),
        getBills(token),
        getPriceTypes(token),
        getNomenclature(token)
      ]);

      setOrganizations(orgRes);
      console.log("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:", orgRes.slice(0, 3));

      setWarehouses(whRes);
      setBills(billRes);
      setPriceTypes(ptRes);
      setNomenclature(nomRes);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
    }
  };
  fetchData();
}, [token]);


  const handleSearchClient = async () => {
    if (!phone) return;
    try {
      const data = await searchClient(phone, token);
      const found = Array.isArray(data.results) ? data.results[0] : data[0];
      if (found) setClient(found);
    } catch (err) {
      setError('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  };

  const addGood = () => {
    if (nomenclature.length === 0) return;
    const firstGood = nomenclature[0];
    setGoods([
      ...goods,
      {
        nomenclature: firstGood.id,
        name: firstGood.name,
        price: firstGood.prices?.[0]?.price || 0,
        quantity: 1,
        sum: firstGood.prices?.[0]?.price || 0
      }
    ]);
  };

  const updateGood = (index, field, value) => {
    const newGoods = [...goods];
    newGoods[index][field] = value;
    newGoods[index].sum = newGoods[index].price * newGoods[index].quantity;
    setGoods(newGoods);
  };

  const removeGood = (index) => {
    setGoods(goods.filter((_, i) => i !== index));
  };

  const getTotalSum = () => {
    return goods.reduce((sum, g) => sum + g.sum, 0);
  };

  const handleSubmit = async (conduct) => {
    setLoading(true);
    setError('');
    const payload = {
      operation: "–ó–∞–∫–∞–∑",
      tax_included: true,
      tax_active: true,
      goods: goods.map(g => ({
        price: g.price,
        quantity: g.quantity,
        unit: 116,
        discount: 0,
        sum_discounted: g.sum,
        nomenclature: g.nomenclature
      })),
      loyality_card_id: client?.loyalty_cards?.[0]?.id || null,
      warehouse: selectedWarehouse,
      contragent: client?.id || null,
      paybox: selectedBill,
      organization: selectedOrg,
      status: !conduct,
      paid_rubles: parseFloat(paidRubles) || 0
    };

    try {
      const result = await createSale(payload, token);
      alert(conduct ? '‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–≤–µ–¥—ë–Ω' : 'üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
      console.log('–û—Ç–≤–µ—Ç API:', result);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <h2 style={{ marginBottom: '16px', color: '#333' }}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>

      {error && <div style={{ color: 'red', marginBottom: '12px' }}>{error}</div>}

      {/* –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ */}
      <div className="input-group">
        <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞</label>
        <div style={{ display: 'flex' }}>
          <input
            type="tel"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            placeholder="79991234567"
          />
          <button onClick={handleSearchClient} className="search-btn">
            –ù–∞–π—Ç–∏
          </button>
        </div>
        {client && (
          <div className="client-info">
            üßë <strong>{client.name}</strong> | –ë–∞–ª–∞–Ω—Å: {client.balance || 0} ‚ÇΩ
          </div>
        )}
      </div>

      {/* –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è */}
      <div className="input-group">
        <label>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</label>
        <select value={selectedOrg} onChange={(e) => setSelectedOrg(e.target.value)}>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</option>
          {organizations.map(org => (
            <option key={org.id} value={org.id}>{org.name}</option>
          ))}
        </select>
      </div>

      {/* –°–∫–ª–∞–¥ */}
      <div className="input-group">
        <label>–°–∫–ª–∞–¥</label>
        <select value={selectedWarehouse} onChange={(e) => setSelectedWarehouse(e.target.value)}>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥</option>
          {warehouses.map(wh => (
            <option key={wh.id} value={wh.id}>{wh.name}</option>
          ))}
        </select>
      </div>

      {/* –ö–∞—Å—Å–∞ (—Å—á—ë—Ç) */}
      <div className="input-group">
        <label>–ö–∞—Å—Å–∞ (—Å—á—ë—Ç)</label>
        <select value={selectedBill} onChange={(e) => setSelectedBill(e.target.value)}>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É</option>
          {bills.map(bill => (
            <option key={bill.id} value={bill.id}>{bill.name}</option>
          ))}
        </select>
      </div>

      {/* –¢–æ–≤–∞—Ä—ã */}
      <div>
        <h3 style={{ marginBottom: '12px', color: '#333' }}>–¢–æ–≤–∞—Ä—ã</h3>
        {goods.map((good, index) => (
          <div key={index} className="good-item">
            <input
              type="number"
              placeholder="–¶–µ–Ω–∞"
              value={good.price}
              onChange={(e) => updateGood(index, 'price', +e.target.value)}
            />
            <input
              type="number"
              placeholder="–ö–æ–ª-–≤–æ"
              value={good.quantity}
              onChange={(e) => updateGood(index, 'quantity', +e.target.value)}
            />
            <button
              onClick={() => removeGood(index)}
              className="remove-btn"
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
            <div style={{ fontSize: '14px', marginTop: '4px' }}>
              –°—É–º–º–∞: <strong>{good.sum} ‚ÇΩ</strong>
            </div>
          </div>
        ))}
        <button onClick={addGood} style={{ width: '100%', padding: '10px', marginBottom: '16px' }}>
          + –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </button>
      </div>

      {/* –û–ø–ª–∞—Ç–∞ */}
      <div className="input-group">
        <label>–û–ø–ª–∞—á–µ–Ω–æ (‚ÇΩ)</label>
        <input
          type="number"
          step="0.01"
          value={paidRubles}
          onChange={(e) => setPaidRubles(e.target.value)}
          placeholder="0.00"
        />
      </div>

      {/* –ò—Ç–æ–≥–æ */}
      <div className="total">–ò—Ç–æ–≥–æ: {getTotalSum().toFixed(2)} ‚ÇΩ</div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="button-group">
        <button
          onClick={() => handleSubmit(false)}
          className="btn btn-secondary"
          disabled={loading}
        >
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–°–æ–∑–¥–∞—Ç—å'}
        </button>
        <button
          onClick={() => handleSubmit(true)}
          className="btn btn-primary"
          disabled={loading}
        >
          {loading ? '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏'}
        </button>
      </div>
    </div>
  );
};

export default OrderForm;

